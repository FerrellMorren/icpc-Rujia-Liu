感觉这题好麻烦・・・

想了很久，编完以后连写我的思路我都懒得写・・・因为好多・・・

最兴奋的是一次AC，哈哈哈！！！

妈的，这题我觉得这么难果然是想到了一个超级麻烦的办法・・・
实际上有非常简单的实现，但是我没有想出来啊・・・
一开始就有点跑偏了・・・


题目大意： 
给出N，L，U，找到一个M，让M|N位运算可以最大，满足这个条件的同时要使得M最小。

思路： 
先将2的0 - 32次方存放到一个数组中，由于没有符号的32位的整数最大为2^32 -1，所以必须存到2^32次方，此时注意要用上longlong 否则就错误了，
如果N中的位为0的时候，M必须尽可能的等于1，这样才可以保证M|N最大，但是此时要判断M为1的最小值是否已经超过了U，
同理，当N中的位为1时，M中的位应该尽可能的等于0，这样才可以保证M最小，但是此时也要判断取0的时候达到的最大值是不是会小于L。

代码：

#include <iostream>
using namespace std;
#include <cstdio>
#include <cstring>

long long N,L,U;
int ans[40];
long long index1[40]; // 32位无符号的最大值为2^32 - 1

int main() {

//  int b[40] = {0};
    index1[0] = 1;
    int size = 0;
    long long count1;
    for(int i = 1; i<= 32; i++)
        index1[i] = index1[i - 1] * 2;
    while(scanf("%lld%lld%lld",&N,&L,&U)!=EOF) {
        int b[40] = {0};
        size = 0;
        count1 = 0;
        while(N) {
            b[size++] = N % 2;
            N = N / 2;
        }
        for(int i = 31; i >= 0; i--) {
            if(b[i] == 0) {
                long long p = count1 + index1[i]; // min
                long long q = count1 + index1[i + 1] -1; //max
                if( p <= U )
                    count1 += index1[i];
            }
            else {
                long long p = count1;
                long long q = count1 + index1[i] - 1;
                if(q < L )
                    count1 += index1[i];
            }
        }
        printf("%lld\n",count1);
}

    return 0;
}